<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ContentNotReadyForTranslationResource1.Text" xml:space="preserve">
    <value>Content Not Ready for Translation</value>
  </data>
  <data name="JobCaptionResource1.Text" xml:space="preserve">
    <value>Translation Job</value>
  </data>
  <data name="JsSelectPackageResource" xml:space="preserve">
    <value>Please select a translation package.</value>
  </data>
  <data name="lblJobTitleResource1.Text" xml:space="preserve">
    <value>Job Title</value>
  </data>
  <data name="lblJobTitleResource1.ToolTip" xml:space="preserve">
    <value />
  </data>
  <data name="lblMaxZipSizeResource1.Text" xml:space="preserve">
    <value>ZIP File Size</value>
  </data>
  <data name="lblMaxZipSizeResource1.ToolTip" xml:space="preserve">
    <value />
  </data>
  <data name="lblNoResultsForNotReadyResource1.Text" xml:space="preserve">
    <value>&lt;%= GetMessage("lbl generic No results found")%&gt;</value>
  </data>
  <data name="lblNoResultsForNotReadyResource1.ToolTip" xml:space="preserve">
    <value />
  </data>
  <data name="lblNoResultsForNotReadyResource2.Text" xml:space="preserve">
    <value>All content is ready for translation.</value>
  </data>
  <data name="lblSourceLanguageResource1.Text" xml:space="preserve">
    <value>Source Language</value>
  </data>
  <data name="lblSourceLanguageResource1.ToolTip" xml:space="preserve">
    <value />
  </data>
  <data name="lblTargetJobResource1.Text" xml:space="preserve">
    <value>Select Packages</value>
  </data>
  <data name="lblTargetJobResource1.ToolTip" xml:space="preserve">
    <value />
  </data>
  <data name="lblXliffVerResource1.Text" xml:space="preserve">
    <value>XLIFF Version</value>
  </data>
  <data name="lblXliffVerResource1.ToolTip" xml:space="preserve">
    <value />
  </data>
  <data name="ListItemResource1.Text" xml:space="preserve">
    <value>XLIFF 1.0 (for older Trados)</value>
  </data>
  <data name="ListItemResource1.Value" xml:space="preserve">
    <value>1.0</value>
  </data>
  <data name="ListItemResource2.Text" xml:space="preserve">
    <value>XLIFF 1.1</value>
  </data>
  <data name="ListItemResource2.Value" xml:space="preserve">
    <value>1.1</value>
  </data>
  <data name="ListItemResource3.Text" xml:space="preserve">
    <value>XLIFF 1.2 (recommended)</value>
  </data>
  <data name="ListItemResource3.Value" xml:space="preserve">
    <value>1.2</value>
  </data>
  <data name="ListItemResource4.Text" xml:space="preserve">
    <value>20 MB</value>
  </data>
  <data name="ListItemResource4.Value" xml:space="preserve">
    <value>20000000</value>
  </data>
  <data name="ListItemResource5.Text" xml:space="preserve">
    <value>200 MB</value>
  </data>
  <data name="ListItemResource5.Value" xml:space="preserve">
    <value>200000000</value>
  </data>
  <data name="ListItemResource6.Text" xml:space="preserve">
    <value>2 GB</value>
  </data>
  <data name="ListItemResource6.Value" xml:space="preserve">
    <value>2000000000</value>
  </data>
  <data name="ListItemResource7.Text" xml:space="preserve">
    <value>20 GB</value>
  </data>
  <data name="ListItemResource7.Value" xml:space="preserve">
    <value>20000000000</value>
  </data>
  <data name="ListItemResource8.Text" xml:space="preserve">
    <value>200 GB</value>
  </data>
  <data name="ListItemResource8.Value" xml:space="preserve">
    <value>200000000000</value>
  </data>
  <data name="ListItemResource9.Text" xml:space="preserve">
    <value>Unlimited</value>
  </data>
  <data name="ListItemResource9.Value" xml:space="preserve">
    <value />
  </data>
  <data name="LoadingImgResource1.Text" xml:space="preserve">
    <value />
  </data>
  <data name="LoadingImgResource2.Text" xml:space="preserve">
    <value />
  </data>
  <data name="Localize1Resource1.Text" xml:space="preserve">
    <value>Exported XLIFF files are grouped in ZIP files. The size may be limited for download and email attachments.</value>
  </data>
  <data name="lstMaxZipSizeResource1.ToolTip" xml:space="preserve">
    <value />
  </data>
  <data name="PageResource1.Title" xml:space="preserve">
    <value>Export for Translation</value>
  </data>
  <data name="PageResource2.Title" xml:space="preserve">
    <value>Export for Translation</value>
  </data>
  <data name="PageResource3.Title" xml:space="preserve">
    <value>Export for Translation</value>
  </data>
  <data name="StyleSheetJSResource1.Text" xml:space="preserve">
    <value />
  </data>
  <data name="StyleSheetJSResource2.Text" xml:space="preserve">
    <value />
  </data>
  <data name="StyleSheetJSResource3.Text" xml:space="preserve">
    <value />
  </data>
  <data name="txtJobTitleResource1.Text" xml:space="preserve">
    <value />
  </data>
  <data name="txtJobTitleResource1.ToolTip" xml:space="preserve">
    <value>Job Title</value>
  </data>
  <data name="txtXliffVerResource1.ToolTip" xml:space="preserve">
    <value />
  </data>
  <data name="XliffVersionDescResource1.Text" xml:space="preserve">
    <value>The version to choose depends on the version(s) supported by the translation tool. Your translation provider should be able to guide you. Trados is a commonly used translation tool. Older versions of Trados (e.g., 7) only support XLIFF 1.0. When the Ektron CMS exports XLIFF 1.0, it includes source tags and target tags with a duplicate of the source content. Additionally, the file extension is .xml. This is needed for older versions of Trados. On the other hand, SDL Trados Studio 2009 and other XLIFF tools do not need the target tags, so when XLIFF 1.1 and later are produced, the target tags are not included and the file extension is .xlf. The XLIFF tool will add target tags during the translation process.</value>
  </data>
  <data name="lblIncludeHistoryJobResource1.Text" xml:space="preserve">
    <value>Include Previous Translation</value>
  </data>
  <data name="lblIncludeHistoryJobResource1.ToolTip" xml:space="preserve">
    <value>Include Previous Translation</value>
  </data>
  <data name="IncludeHistoryDescResource1.Text" xml:space="preserve">
    <value>This is usually needed when there is a switch in translation providers. If checked, the package file will include the previous version of source file and the previous version of translated file. The package size will be increased.</value>
  </data>
  <data name="ListItemResource3a.Text" xml:space="preserve">
    <value>XLIFF 1.2.1</value>
  </data>
  <data name="ListItemResource3a.Value" xml:space="preserve">
    <value>1.2.1</value>
  </data>
</root>